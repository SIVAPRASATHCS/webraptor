"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import { Checkbox } from "@/components/ui/checkbox"
import { Bug, Search, AlertTriangle, ExternalLink } from "lucide-react"

interface Vulnerability {
  id: string
  title: string
  severity: "low" | "medium" | "high" | "critical"
  category: string
  description: string
  cve?: string
  cvss?: number
  solution: string
  references: string[]
}

export function VulnerabilityScanner() {
  const [target, setTarget] = useState("")
  const [isScanning, setIsScanning] = useState(false)
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([])
  const [scanOptions, setScanOptions] = useState({
    sqli: true,
    xss: true,
    csrf: false,
    lfi: true,
    rfi: false,
    xxe: true,
    ssrf: false,
  })

  const mockVulnerabilities: Vulnerability[] = [
    {
      id: "1",
      title: "SQL Injection in Login Form",
      severity: "critical",
      category: "Injection",
      description:
        "The login form is vulnerable to SQL injection attacks. An attacker can bypass authentication or extract sensitive data.",
      cve: "CWE-89",
      cvss: 9.8,
      solution: "Use parameterized queries and input validation",
      references: ["https://owasp.org/www-community/attacks/SQL_Injection"],
    },
    {
      id: "2",
      title: "Cross-Site Scripting (XSS)",
      severity: "high",
      category: "XSS",
      description: "Reflected XSS vulnerability found in search parameter. User input is not properly sanitized.",
      cve: "CWE-79",
      cvss: 7.5,
      solution: "Implement proper input validation and output encoding",
      references: ["https://owasp.org/www-community/attacks/xss/"],
    },
    {
      id: "3",
      title: "Local File Inclusion",
      severity: "high",
      category: "LFI",
      description: "The application allows reading arbitrary files from the server filesystem.",
      cve: "CWE-22",
      cvss: 8.1,
      solution: "Validate and sanitize file path inputs",
      references: ["https://owasp.org/www-community/attacks/Path_Traversal"],
    },
    {
      id: "4",
      title: "Missing Security Headers",
      severity: "medium",
      category: "Configuration",
      description:
        "Several important security headers are missing, including X-Frame-Options and Content-Security-Policy.",
      cvss: 5.3,
      solution: "Implement proper security headers",
      references: ["https://owasp.org/www-project-secure-headers/"],
    },
  ]

  const startScan = async () => {
    setIsScanning(true)
    setVulnerabilities([])

    // Simulate progressive vulnerability discovery
    for (let i = 0; i < mockVulnerabilities.length; i++) {
      await new Promise((resolve) => setTimeout(resolve, 2000))
      setVulnerabilities((prev) => [...prev, mockVulnerabilities[i]])
    }

    setIsScanning(false)
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "bg-red-500"
      case "high":
        return "bg-orange-500"
      case "medium":
        return "bg-yellow-500"
      case "low":
        return "bg-blue-500"
      default:
        return "bg-gray-500"
    }
  }

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical":
      case "high":
        return <AlertTriangle className="w-4 h-4" />
      default:
        return <Bug className="w-4 h-4" />
    }
  }

  return (
    <Card className="bg-slate-800/50 border-slate-700">
      <CardHeader>
        <CardTitle className="text-white flex items-center gap-2">
          <Bug className="w-5 h-5" />
          Vulnerability Scanner
        </CardTitle>
        <CardDescription className="text-gray-400">
          Test for common web application security vulnerabilities
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <Label htmlFor="vuln-target" className="text-white">
              Target URL
            </Label>
            <Input
              id="vuln-target"
              placeholder="https://example.com"
              value={target}
              onChange={(e) => setTarget(e.target.value)}
              className="bg-slate-700 border-slate-600 text-white"
              disabled={isScanning}
            />
          </div>
          <div className="flex items-end">
            <Button
              onClick={startScan}
              disabled={!target || isScanning}
              className="bg-purple-600 hover:bg-purple-700 w-full"
            >
              {isScanning ? (
                <>
                  <Search className="w-4 h-4 mr-2 animate-spin" />
                  Scanning...
                </>
              ) : (
                <>
                  <Search className="w-4 h-4 mr-2" />
                  Start Vulnerability Scan
                </>
              )}
            </Button>
          </div>
        </div>

        {/* Scan Options */}
        <div>
          <Label className="text-white mb-3 block">Vulnerability Tests</Label>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
            {Object.entries(scanOptions).map(([key, value]) => (
              <div key={key} className="flex items-center space-x-2">
                <Checkbox
                  id={key}
                  checked={value}
                  onCheckedChange={(checked) => setScanOptions((prev) => ({ ...prev, [key]: checked }))}
                  disabled={isScanning}
                />
                <Label htmlFor={key} className="text-white text-sm">
                  {key.toUpperCase()}
                </Label>
              </div>
            ))}
          </div>
        </div>

        {vulnerabilities.length > 0 && (
          <div className="space-y-3">
            <h3 className="text-lg font-semibold text-white">Vulnerabilities Found ({vulnerabilities.length})</h3>
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {vulnerabilities.map((vuln) => (
                <Card key={vuln.id} className="bg-slate-700/50 border-slate-600">
                  <CardContent className="p-4">
                    <div className="space-y-3">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-2">
                            <Badge className={`${getSeverityColor(vuln.severity)} text-white flex items-center gap-1`}>
                              {getSeverityIcon(vuln.severity)}
                              {vuln.severity.toUpperCase()}
                            </Badge>
                            <span className="text-sm text-gray-400">{vuln.category}</span>
                            {vuln.cvss && <span className="text-sm text-gray-400">CVSS: {vuln.cvss}</span>}
                          </div>
                          <h4 className="font-medium text-white mb-2">{vuln.title}</h4>
                          <p className="text-sm text-gray-300 mb-3">{vuln.description}</p>

                          <div className="space-y-2">
                            <div>
                              <span className="text-sm font-medium text-white">Solution:</span>
                              <p className="text-sm text-gray-300">{vuln.solution}</p>
                            </div>

                            {vuln.cve && (
                              <div>
                                <span className="text-sm font-medium text-white">CVE/CWE:</span>
                                <span className="text-sm text-purple-400 ml-2">{vuln.cve}</span>
                              </div>
                            )}

                            {vuln.references.length > 0 && (
                              <div>
                                <span className="text-sm font-medium text-white">References:</span>
                                <div className="flex flex-wrap gap-2 mt-1">
                                  {vuln.references.map((ref, index) => (
                                    <Button
                                      key={index}
                                      variant="ghost"
                                      size="sm"
                                      className="text-purple-400 hover:text-purple-300 p-0 h-auto"
                                    >
                                      <ExternalLink className="w-3 h-3 mr-1" />
                                      Reference {index + 1}
                                    </Button>
                                  ))}
                                </div>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  )
}
